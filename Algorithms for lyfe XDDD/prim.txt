#include <algorithm>
#include <set>
#include <vector>
#include <unordered_map>
#include <tuple>
#include <iostream>
#include <climits>

using Graph = std::unordered_map<int,std::unordered_map<int , double>>;

struct PriorityQueue
{
	PriorityQueue()= default;

	void push(int node, double val) // O(LogN)
	{
		byNodes.insert({node, val});
		byWeights.insert({val, node});
	}


	void update(int node, double newVal) // O(LogN)
	{
		double oldVal = byNodes[node]; // O(1)
		byWeights.erase({oldVal, node});  // O(LogN)
		byWeights.insert({newVal, node}); // O(LogN)
		byNodes[node] = newVal; // O(1)
	}

	// top() returns the minimum element from the priority queue and deletes it
	int top()
	{
		// Take the identifier of the node that has the minimum value
		int topNode = byWeights.begin()->second;

		byNodes.erase(topNode);
		byWeights.erase(byWeights.begin());

		return topNode;
	}

	bool empty() const
	{
		return byNodes.empty();
	}

	// (E,8) ----update(E,3)----> (E,3)

	std::unordered_map<int,double> byNodes; // store <node,weight> (C,1) (D,6) (E,8)
	
	std::set<std::pair<double,int>> byWeights; // store <weight,node> (1,C) (6,D) (8,E)
};

// Returns MST
std::vector<std::pair<int,int>> prim(Graph& g)
{
	// let us assume that we pick 0 as the start node 
	int start = 0;

	// k[x]: distance of x to the growing tree. The cheapest way to connect node x to our tree.
	std::vector<double> k(g.size(), INT_MAX);

	// parent vector. p[b] = a. Node 'b' is connected to the tree by node 'a'
	std::vector<int> p(g.size(), -1);

	// p[i]: -1  0  1  2  5
	//  i:	  0  1  2  3  4
	//        A  B  C  D  E ..

	std::vector<bool> visited(g.size(), false);

	PriorityQueue pq;
	for (int i = 0; i < g.size(); i++)
	{
		pq.push(i, k[i]);
	}

	// init
	k[start] = 0.0;
	pq.update(start, 0);


	while (!pq.empty())
	{
		int u = pq.top();
		visited[u] = true;

		// u-----w---->v
		for (auto [v,w] : g[u])
		{
			if (!visited[v])
				if (w < k[v])
					k[v] = w, p[v] = u, pq.update(v, k[v]);
		}
	}

	// minimum spanning tree 
	// (A,B), (B,C), (C,I)
	std::vector<std::pair<int,int>> mst;
	for (int i = 1; i < p.size(); i++)
		mst.emplace_back(p[i], i);

	return mst;

}